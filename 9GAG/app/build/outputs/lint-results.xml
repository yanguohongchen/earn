<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 23.0.2">

    <issue
        id="SuspiciousImport"
        severity="Warning"
        message="Don&apos;t include android.R here; use a fully qualified name for each usage instead"
        category="Correctness"
        priority="9"
        summary="Checks for &apos;import android.R&apos; statements, which are usually accidental"
        explanation="Importing `android.R` is usually not intentional; it sometimes happens when you use an IDE and ask it to automatically add imports at a time when your project&apos;s R class it not present.

Once the import is there you might get a lot of &quot;confusing&quot; error messages because of course the fields available on `android.R` are not the ones you&apos;d expect from just looking at your own `R` class."
        errorLine1="import android.R;"
        errorLine2="~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/ui/adapter/CardsAnimationAdapter.java"
            line="3"
            column="1"/>
    </issue>

    <issue
        id="GradleDeprecated"
        severity="Warning"
        message="&apos;android&apos; is deprecated; use &apos;com.android.application&apos; instead"
        category="Correctness"
        priority="6"
        summary="Looks for deprecated Gradle constructs"
        explanation="This detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update."
        errorLine1="apply plugin: &apos;android&apos;"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/build.gradle"
            line="1"
            column="1"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag ProgressBar"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;ProgressBar xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/actionbar_refresh_progress.xml"
            line="6"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 16 (current min is 14): android.widget.TextView#postInvalidateOnAnimation"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                            textView.postInvalidateOnAnimation();"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/view/titanic/Titanic.java"
            line="70"
            column="38"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 19"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/build.gradle"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            convertView = LayoutInflater.from(App.getContext()).inflate(R.layout.listitem_drawer, null);"
        errorLine2="                                                                                                  ~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/ui/adapter/DrawerAdapter.java"
            line="42"
            column="99"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="        View contentView = inflater.inflate(R.layout.fragment_drawer, null);"
        errorLine2="                                                                      ~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/ui/fragment/DrawerFragment.java"
            line="37"
            column="71"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="        return mLayoutInflater.inflate(R.layout.listitem_feed, null);"
        errorLine2="                                                               ~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/ui/adapter/FeedsAdapter.java"
            line="57"
            column="64"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="        mLoadingFooter = LayoutInflater.from(context).inflate(R.layout.loading_footer, null);"
        errorLine2="                                                                                       ~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/view/LoadingFooter.java"
            line="31"
            column="88"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="                R.layout.swipeback_layout, null);"
        errorLine2="                                           ~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/view/swipeback/SwipeBackActivityHelper.java"
            line="30"
            column="44"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:support-v4 than 19.1.+ is available: 21.0.2"
        category="Correctness"
        priority="4"
        summary="Looks for old or obsolete Gradle library dependencies"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.android.support:support-v4:19.1.+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/build.gradle"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;sp&quot; instead of &quot;dp&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Looks for uses of `dp` instead of `sp` dimensions for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="    android:textSize=&quot;15dip&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/listitem_drawer.xml"
            line="16"
            column="5"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (me.storm.ninegag.view.ProgressWheel.1)"
        category="Performance"
        priority="4"
        summary="Ensures that Handler classes do not hold on to a reference to an outer class"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler spinHandler = new Handler() {"
        errorLine2="                                      ~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/java/me/storm/ninegag/view/ProgressWheel.java"
            line="60"
            column="39"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/drawer_bg with a theme that also paints a background (inferred theme is @style/AppTheme)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/drawer_bg&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/fragment_drawer.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background ?android:attr/activatedBackgroundIndicator with a theme that also paints a background (inferred theme is @style/AppTheme)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;?android:attr/activatedBackgroundIndicator&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/listitem_drawer.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.drawable.actionbar_bg appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable/actionbar_bg.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.dark_blue appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;dark_blue&quot;>#25865E&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/colors.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.light_blue appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;light_blue&quot;>#7FC5B0&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/colors.xml"
            line="5"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.light_yellow appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;light_yellow&quot;>#FFF6F7&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/colors.xml"
            line="6"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.white appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;white&quot;>#FFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/colors.xml"
            line="7"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.black appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;black&quot;>#000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/colors.xml"
            line="8"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.activity_horizontal_margin appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;activity_horizontal_margin&quot;>16dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/dimens.xml"
            line="3"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.activity_vertical_margin appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;activity_vertical_margin&quot;>16dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/dimens.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.drawer_text_selector appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/color/drawer_text_selector.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.drawable.ic_launcher appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable-hdpi/ic_launcher.png"/>
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable-mdpi/ic_launcher.png"/>
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable-xhdpi/ic_launcher.png"/>
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable-xxhdpi/ic_launcher.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.drawable.listitem_drawer_selector appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable/listitem_drawer_selector.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.string.the_end appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;the_end&quot;>TheEnd&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/values/strings.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-hdpi: ab_texture_tile.png, bg.png, ic_action_overflow.png, ic_back_holo_light.png, ic_drawer.png... (7 more)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable-hdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-mdpi: ab_texture_tile.png, bg.png, ic_action_overflow.png, ic_back_holo_light.png, ic_drawer.png... (7 more)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/drawable-mdpi"/>
    </issue>

    <issue
        id="AlwaysShowAction"
        severity="Warning"
        message="Prefer &quot;ifRoom&quot; instead of &quot;always&quot;"
        category="Usability"
        priority="3"
        summary="Checks for uses of `showAsAction=&quot;always&quot;` and suggests `showAsAction=&quot;ifRoom&quot;` instead"
        explanation="Using `showAsAction=&quot;always&quot;` in menu XML, or `MenuItem.SHOW_AS_ACTION_ALWAYS` in Java code is usually a deviation from the user interface style guide.Use `ifRoom` or the corresponding `MenuItem.SHOW_AS_ACTION_IF_ROOM` instead.

If `always` is used sparingly there are usually no problems and behavior is roughly equivalent to `ifRoom` but with preference over other `ifRoom` items. Using it more than twice in the same menu is a bad idea.

This check looks for menu XML files that contain more than two `always` actions, or some `always` actions and no `ifRoom` actions. In Java code, it looks for projects that contain references to `MenuItem.SHOW_AS_ACTION_ALWAYS` and no references to `MenuItem.SHOW_AS_ACTION_IF_ROOM`."
        url="http://developer.android.com/design/patterns/actionbar.html"
        urls="http://developer.android.com/design/patterns/actionbar.html"
        errorLine1="        android:showAsAction=&quot;always&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/menu/main.xml"
            line="11"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/activity_main.xml"
            line="12"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/listitem_feed.xml"
            line="18"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;The End&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;The End&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/sea/git/9GAG/app/src/main/res/layout/loading_footer.xml"
            line="23"
            column="9"/>
    </issue>

</issues>
